#ifdef GL_ES
precision mediump float;
#endif

uniform float iGlobalTime;
uniform vec2 iResolution;

float f(vec2 p)
{
	float v = 0.0;	
	float n = 0.0;
	
	for(int i = 0;i < 15;i++)
	{
		v += sin(p.x*n+iGlobalTime * 2.0)*sin(p.y*n);
		n++;
	}
	
	return v;	
}

vec2 df(vec2 p)
{
	vec2 h = vec2(0.01,0);
	return vec2(f(p+h.xy) - f(p-h.xy),f(p+h.yx) - f(p-h.yx))/h.x;
}

void main( void ) {
float PI=3.1412;
	vec2 res = vec2(iResolution.x/iResolution.y,1);
	vec2 p = ( gl_FragCoord.xy / iResolution.y ) - res/2.0;
	p *= 8.0;

	
		//vec2 p = (2.0*gl_FragCoord.xy - iResolution.xy)/iResolution.y;
	//p = floor(p)+fract(p*4.0);
	vec3 col = vec3(0.2);
	for(int i=0; i<20; i++) {
		float a = 2.0*PI*float(i)/12.0 + iGlobalTime*0.2;
		float x = cos(iGlobalTime)*cos(a)-sin(a*2.0);
		float y = sin(iGlobalTime)*sin(a-iGlobalTime)+sin(iGlobalTime)*cos(a-iGlobalTime);
		vec2 q = 7. * cos(iGlobalTime)*vec2(x,y);
		float r = fract(a);
		float g = 1.0-r;
		col += 0.05/length(p-q)*vec3(r, g, 0.01);
	}
	
	
	float c, c1, c2, c3 = 0.0;
	
	c = abs(f(p))/length(df(p));
	c1 = smoothstep(0.000,8.0/iResolution.x,c);
	c2 = smoothstep(0.02,5.0/iResolution.x,c);
//	c3 = smoothstep(0.001,0.0/iResolution.x,c);
        c3 = col.r;
	vec3 pat = vec3(c,c2,0.);
	vec3 o = mix(pat, col, vec3(0.65));
	gl_FragColor = vec4( o , 1.0 );

}